
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN AUTO BOOL BREAK CASE CHAR CLASS CONST CONTINUE DEFAULT DELETE DIVIDE DO DOUBLE ELSE ENUM EXTERN FALSE FLOAT FOR FRIEND GOTO ID IF INLINE INT LBRACE LONG LPAREN MAIN MINUS NAMESPACE NEW NOT NUMBER OPERATOR OR PLUS PUBLIC RBRACE REGISTER RETURN RPAREN SEMI SHORT SIGNED SIZEOF STATIC STRING STRUCT SWITCH TEMPLATE TIMES TRUE TYPEDEF UNION UNSIGNED USING VOID VOLATILE WHILEprogram : decl_list stmt_listdecl_list : decl_list declarationdecl_list : declaration : type_specifier ID SEMItype_specifier : INT\n| FLOAT\n| BOOL\n| CHAR\n| STRINGstmt_list : stmt_list statementstmt_list : statementstatement : assignmentstatement : expression SEMIstatement : IF LPAREN expression RPAREN statement ELSE statement\n| IF LPAREN expression RPAREN statementstatement : WHILE LPAREN expression RPAREN statementstatement : LBRACE stmt_list RBRACEassignment : ID ASSIGN expression SEMIexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : NUMBERfactor : IDfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'IF':([0,2,3,4,5,8,13,22,25,32,35,42,45,46,47,48,49,50,51,],[-3,10,10,-2,-11,-12,10,-10,-13,10,-4,-17,-18,10,10,-15,-16,10,-14,]),'WHILE':([0,2,3,4,5,8,13,22,25,32,35,42,45,46,47,48,49,50,51,],[-3,12,12,-2,-11,-12,12,-10,-13,12,-4,-17,-18,12,12,-15,-16,12,-14,]),'LBRACE':([0,2,3,4,5,8,13,22,25,32,35,42,45,46,47,48,49,50,51,],[-3,13,13,-2,-11,-12,13,-10,-13,13,-4,-17,-18,13,13,-15,-16,13,-14,]),'INT':([0,2,4,35,],[-3,14,-2,-4,]),'FLOAT':([0,2,4,35,],[-3,15,-2,-4,]),'BOOL':([0,2,4,35,],[-3,16,-2,-4,]),'CHAR':([0,2,4,35,],[-3,17,-2,-4,]),'STRING':([0,2,4,35,],[-3,18,-2,-4,]),'ID':([0,2,3,4,5,6,8,11,13,14,15,16,17,18,22,24,25,26,27,28,31,32,33,34,35,42,45,46,47,48,49,50,51,],[-3,7,7,-2,-11,23,-12,30,7,-5,-6,-7,-8,-9,-10,30,-13,30,30,30,30,7,30,30,-4,-17,-18,7,7,-15,-16,7,-14,]),'NUMBER':([0,2,3,4,5,8,11,13,22,24,25,26,27,28,31,32,33,34,35,42,45,46,47,48,49,50,51,],[-3,21,21,-2,-11,-12,21,21,-10,21,-13,21,21,21,21,21,21,21,-4,-17,-18,21,21,-15,-16,21,-14,]),'LPAREN':([0,2,3,4,5,8,10,11,12,13,22,24,25,26,27,28,31,32,33,34,35,42,45,46,47,48,49,50,51,],[-3,11,11,-2,-11,-12,28,11,31,11,-10,11,-13,11,11,11,11,11,11,11,-4,-17,-18,11,11,-15,-16,11,-14,]),'$end':([1,3,5,8,22,25,42,45,48,49,51,],[0,-1,-11,-12,-10,-13,-17,-18,-15,-16,-14,]),'RBRACE':([5,8,22,25,32,42,45,48,49,51,],[-11,-12,-10,-13,42,-17,-18,-15,-16,-14,]),'ASSIGN':([7,],[24,]),'TIMES':([7,19,20,21,30,37,38,40,43,44,],[-26,33,-24,-25,-26,33,33,-27,-22,-23,]),'DIVIDE':([7,19,20,21,30,37,38,40,43,44,],[-26,34,-24,-25,-26,34,34,-27,-22,-23,]),'SEMI':([7,9,19,20,21,23,30,36,37,38,40,43,44,],[-26,25,-21,-24,-25,35,-26,45,-19,-20,-27,-22,-23,]),'PLUS':([7,9,19,20,21,29,30,36,37,38,39,40,41,43,44,],[-26,26,-21,-24,-25,26,-26,26,-19,-20,26,-27,26,-22,-23,]),'MINUS':([7,9,19,20,21,29,30,36,37,38,39,40,41,43,44,],[-26,27,-21,-24,-25,27,-26,27,-19,-20,27,-27,27,-22,-23,]),'ELSE':([8,25,42,45,48,49,51,],[-12,-13,-17,-18,50,-16,-14,]),'RPAREN':([19,20,21,29,30,37,38,39,40,41,43,44,],[-21,-24,-25,40,-26,-19,-20,46,-27,47,-22,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([0,],[2,]),'stmt_list':([2,13,],[3,32,]),'declaration':([2,],[4,]),'statement':([2,3,13,32,46,47,50,],[5,22,5,22,48,49,51,]),'type_specifier':([2,],[6,]),'assignment':([2,3,13,32,46,47,50,],[8,8,8,8,8,8,8,]),'expression':([2,3,11,13,24,28,31,32,46,47,50,],[9,9,29,9,36,39,41,9,9,9,9,]),'term':([2,3,11,13,24,26,27,28,31,32,46,47,50,],[19,19,19,19,19,37,38,19,19,19,19,19,19,]),'factor':([2,3,11,13,24,26,27,28,31,32,33,34,46,47,50,],[20,20,20,20,20,20,20,20,20,20,43,44,20,20,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decl_list stmt_list','program',2,'p_program','main.py',123),
  ('decl_list -> decl_list declaration','decl_list',2,'p_decl_list_multiple','main.py',127),
  ('decl_list -> <empty>','decl_list',0,'p_decl_list_empty','main.py',131),
  ('declaration -> type_specifier ID SEMI','declaration',3,'p_declaration','main.py',135),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','main.py',140),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','main.py',141),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','main.py',142),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','main.py',143),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','main.py',144),
  ('stmt_list -> stmt_list statement','stmt_list',2,'p_stmt_list_multiple','main.py',148),
  ('stmt_list -> statement','stmt_list',1,'p_stmt_list_single','main.py',152),
  ('statement -> assignment','statement',1,'p_statement_assignment','main.py',156),
  ('statement -> expression SEMI','statement',2,'p_statement_expr','main.py',160),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','main.py',164),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement_if','main.py',165),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','main.py',172),
  ('statement -> LBRACE stmt_list RBRACE','statement',3,'p_statement_compound','main.py',176),
  ('assignment -> ID ASSIGN expression SEMI','assignment',4,'p_assignment','main.py',180),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','main.py',185),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','main.py',189),
  ('expression -> term','expression',1,'p_expression_term','main.py',193),
  ('term -> term TIMES factor','term',3,'p_term_times','main.py',198),
  ('term -> term DIVIDE factor','term',3,'p_term_divide','main.py',202),
  ('term -> factor','term',1,'p_term_factor','main.py',206),
  ('factor -> NUMBER','factor',1,'p_factor_number','main.py',210),
  ('factor -> ID','factor',1,'p_factor_id','main.py',214),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','main.py',218),
]
